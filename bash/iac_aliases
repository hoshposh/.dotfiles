#################################################################
#
# Infrastructure As Code (IAC) Aliases
#
#################################################################

function pretty-csv {
	column -t -s, | less -F -S -X -K
}

function iac_replace {
	local -r original="$1"
	local -r new="$2"
	local -r auto_approve="${3:-false}"

	echo -e "Replacing '$original' with '$new' affecting the following:\n"
	if ! wgrep --exclude=\*.log "$original"; then
		echo "Found nothing to replace."
		return 1
	fi
	echo

	if [[ "$auto_approve" == "false" ]] && ! ask "Do you want to proceed with replacement?"; then
		return 1
	fi

	wgrep -l --exclude=\*.log "$original" | xargs sed -i -e "s|${original}|${new}|g" &&
		echo -e "\n✔️  Replaced '$original' with '$new'" || echo -e "\n❌  Failed to replace '$original' with '$new'"
}

# Replace all versions with target version
function iac_replace_all {
	target_version="$1"
	
	for v in $(wgrep "\s*source\s*=\s*" | cut -d\? -f2- | sort | uniq | cut -d = -f2- | sed 's|"||'); do 
		iac_replace "$v" "$target_version"
	done
}

function iac_discover_tf_version_hcl {
  local -r hcl_dir="${1:-.}"
  local -r base_dir="${INFRA_LIVE:-${FOCUSSAAS_INFRA_LIVE:-$2}}"
  # TODO: discover s3_path from <account>/terragrunt.hcl - terraform_state_s3_bucket (relative from pwd)
  local -r s3_base_path="${3:-"s3://microfocus-multi-dev-terraform-state"}"

  if [[ ! -d "$base_dir" ]]; then
    echo "ERROR: Directory does not exist: $base_dir."
    return 1
  fi

  local -r full_path="$(realpath $hcl_dir)"
  local -r rel_path="$(echo "$full_path" | sed "s|$base_dir/||g")"
  local -r s3_rel_path="${rel_path#*/}"
  local -r s3_path="$s3_base_path/$s3_rel_path"

  echo -e "--\n$rel_path"
  aws s3 cp "$s3_path/terraform.tfstate" - | jq '.terraform_version'
}

function iac_discover_tf_version {
  local -r base_dir="${1:-.}"

  if [[ ! -d "$base_dir" ]]; then
    echo "ERROR: Directory does not exist: $base_dir."
    return 1
  fi

  if [[ -f "$base_dir/terragrunt.hcl" ]]; then
    iac_discover_tf_version_hcl "$base_dir"
  else
    for f in $(find "$base_dir" -name terragrunt.hcl | grep -v '.terragrunt-cache' | sort | uniq); do
      local dir="$(dirname "$f")"
      iac_discover_tf_version_hcl "$dir"
    done
  fi
}

function iac_cleanup {
	local -r dir="${1:-.}"

	echo "Cleaning up .terragrunt-cache directories from $dir"
	find "$dir" -type d -name .terragrunt-cache 2>/dev/null -exec rm -rf {} \;
	echo "Done."
}

function iac_hcl_fmt {
	local -r base_dir="${1:-.}"

	find "$base_dir" -name terragrunt.hcl -not -path "*/.terragrunt-cache/*" -exec hcledit fmt -u -f {} \;
}

function iac_hcl_find {
	local -r hcl_search="$1"

	if [[ -z "$hcl_search" ]]; then
		echo -e "ERROR: Missing \$1 as search string.\n\nExample: iac_hcl_find mgmt/vpc"
		return 1
	fi

	find . -not -path "*/.terragrunt-cache/*" -type f -name terragrunt.hcl | grep "$hcl_search"
}

function iac_discover_modules {
	wgrep "\s*source\s*=.*" | grep terragrunt.hcl | sed 's|.*source\s*=\s*||;s|^"||;s|"$||;s|.*.git//||;s|?ref=.*||' | sort | uniq
}
